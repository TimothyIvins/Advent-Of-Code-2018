/*
const input = 
`.#.#...|#.
.....#|##|
.|..|...#.
..|#.....#
#.#|||#|#|
...#.||...
.|....|...
||...#|.#|
|.||||..|.
...#.|..|.`
*/

const input = 
`.#...#..|.#||.|.......##.|#|.....#|...#.|.....#.|.
|..|.#.|.#....#.|..#..|#....#|#.|||.....|...#....#
|..|..|.||.....#..#||..#..#..|.#.|..|..||...|#...#
..##|.||.|.#.###.....#....#...#.|.|..||||.....|.|.
.....#.......|..|#.|...|.|#..........#|.|..|.||.##
.#|....|..|..#.#|.|..||#...|....##||..|.||....#.#.
|##......#.#..|.|..##|#...|...|.##|...|#...|...##|
...|...|||.#|..|#.#....#|....|..||..|...|#|..#|.|.
|.|##....#.|.|.#..#...##.#......#.#.|......|...|||
..#.||..#.....#.|##..#..|##...|#|..|##|..|.|#..##.
..||#...#..|...|#.#....#...#...|#.||.|.##|.#....#|
.#...#.#|#|.#....#..|....|.|...|.|.#...#.||....|..
.#...........##.#...#..||...#...|###...|...#.|.#..
....|.|...##|#...#..#|#......##....#...|.#.....|#|
.##..#.#.##.....#......|....#...|.#.#......#...##.
...#.#..|#|#..#.....||.##|#....|.#.|...#||#.|#...|
.#..##||.#|....|.||.||...|..|....|#..#|..##.#|.|.#
.#.||.|##.|..|..#..|#|..###.||#........||#|.||##|.
.|.##|.#....#.#..|..|...#...|.#.|......|##..#.....
..||...|.|##.||..|.|...|#..|.........#.|.#.....|##
#..|..|#.......#.||#.|#..|#|#.##.|||....#.#...|..|
|..|#|...||..|..||...#......##..|.|#..##....#.##.|
#|.#...|..|.....||.|###..#|.|..#.|..|||.#.#....|..
..#.||....##|.##.#.##..#||......#.#.....|.....#...
#.#...||..|..|#...|#..||#.|..|..|..||.|.#...|...#.
..|.#.#.|.#|#...#.||.|#|#..#..#.#|....##||#..|.|.#
.#...|....#...|.||#.|.#...|.......#..|.#........|.
..|.#|#||#....|..|#.#...#....#..|.|.|..||#|..##...
......|........|......||................|...##..#.
#|.......|.|.|.|..####..#.|#....|..|#|#....#....|.
||.||#.||#....|.#..#.....|..#.|#.|.|...|....####..
..........#|..|||..#|..|..|||##|#||#|....||.|...||
....|....#.|......#|....###....|.##|.#||||||..#.|#
.|#|.#.##||......#.#.||.|.##...|.|.|#........#.#|.
.......|...|..|.|.....|.#|.|.#...#...#|...#.||...#
.||.#..|.##.#..##...#....|...|#..##|.|.#..|#|#|..|
.#..|.|##|....#|###.....|...||.|.|||......#|....|.
.|#.#.....|.##.##.|........|...|...|||....#....##.
...##|||.|##|.|..#......#.......|##|.|..|.......|.
...#.....#|.#.||.....|....#.#|......##.....##..|#|
..|.|...|....#|....###.|##..........|#..#|.#|..|#.
..|..#.|.....|...|...#|.||#|..#.#..#.#|..|........
..|..||.#.......|##|..|..|..|..##|.|...#.#..|.....
#.#..#.|###...#...||.#..#|...|.##...|..#|.......|.
..##.|..#|...#...|..#.|..|#.|.....#..#.#..#|#|...#
#......|..|.#.|.|...........#......||..#.||..#....
...#|......#.#|.....#....|..|......|.#.#.|.|......
#|.##...#.##..|#..|...#.....#|.#.............|..|#
.....|.|..|.||.#|.||##...#|.##|#.....#..#..#|.#...
..|..|.#.....#.##|.##|.||..#..#|#.||..||#.###..||.`


class Plot {

  constructor (inputData) {

    this.grid = inputData.trim().split('\n').map(row => row.split(''))
    this.height = this.grid.length
    this.width = this.grid[0].length

  }

  get hashValue () {
    
   return this.grid.reduce((text, row) => text + row.join(''), '')

  }


  get resourceValue () {
    
   return this.getOccurenceCount('#') * this.getOccurenceCount('|')

  }

  getOccurenceCount (char) {

    return this.grid.reduce((count, row) => count + row.filter(cell => cell === char).length, 0)

  }

  tick () {

    const newGrid = [];

    for (let i = 0; i < this.height; i++) {
      newGrid[i] = []
      for (let j = 0; j < this.width; j++) {
        newGrid[i].push(this.getNextValue(i, j))
      }
    }

    this.grid = newGrid

  }

  getNextValue (i, j) {

    const adjacentCells = []
    const adjacentDisplacements = [
      [-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]
    ]

    for (let [row, col] of adjacentDisplacements) {
      if (this.grid[i + row] && this.grid[i + row][j + col]) {
        adjacentCells.push(this.grid[i + row][j + col])
      }
    }

    if (this.grid[i][j] === '.') {
      return (adjacentCells.filter(cell => cell === '|').length >= 3) ? '|' : '.'
    }

    if (this.grid[i][j] === '|') {
      return (adjacentCells.filter(cell => cell === '#').length >= 3) ? '#' : '|'
    }

    if (this.grid[i][j] === '#') {
      return (adjacentCells.some(cell => cell === '#') && adjacentCells.some(cell => cell === '|')) ? '#' : '.'
    }

    console.log('Invalid character in grid', i, j, this.grid[i][j])

  }

  displayGrid () {

    console.log(this.grid.reduce((text, row) => text + row.join('') + '\n', ''))

  }

};

const getRecurringPatternRange = (plot) => {

  const hashTable = {};
  let hashValue;

  for (let i = 0; true; i++) {
      
    plot.tick();
    hashValue = plot.hashValue;

    if (hashTable[hashValue]) {
      return { start: hashTable[hashValue], length: i - hashTable[hashValue] }; 
    };

    hashTable[hashValue] = i;

  };

};

const part1 = (input, ticks) => {

  const plot1 = new Plot(input);

  for (i = 1; i <= ticks; i++) {

    plot1.tick();

  }

  return plot1.resourceValue;

}

const part2 = (input, ticks) => {

  const plot1 = new Plot(input);

  const { start, length } = getRecurringPatternRange(plot1);
  const revisedTicks = start + ((ticks - start) % length)
  
  return part1(input, revisedTicks);

};

console.log('Part 1:', part1(input, 10));
console.log('Part 2:', part2(input, 1000000000));
